AWSTemplateFormatVersion: '2010-09-09'
Transform: 
  - AWS::Serverless-2016-10-31
  
Description: Bank
Resources: 
  CompaniesBucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: bucket-prueba-company-1

      
  CompaniesBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref CompaniesBucket
      PolicyDocument:
 #       - PolicyName: LambdaRolePolicy
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
            - 's3:DeleteObject'
            - 's3:GetObject'
            - 's3:PutObject'
          Resource: !Join ['', ['arn:aws:s3:::', !Ref CompaniesBucket, /*]]
          Principal: '*'

      
  # SampleBucketPolicy:
  # Type: 'AWS::S3::BucketPolicy'
  # Properties:
  #   Bucket: !Ref DOC-EXAMPLE-BUCKET
  #   PolicyDocument:
  #     Version: 2012-10-17
  #     Statement:
  #       - Action:
  #           - 's3:GetObject'
  #         Effect: Allow
  #         Resource: !Join
  #           - ''
  #           - - 'arn:aws:s3:::'
  #             - !Ref DOC-EXAMPLE-BUCKET
  #             - /*
  #         Principal: '*'
  #         Condition:
  #           StringLike:
  #             'aws:Referer':
  #               - 'http://www.example.com/*'
  #               - 'http://example.net/*'
  
    
  CompanyRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: companies_role
      ManagedPolicyArns: 
        - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AWSOpsWorksCloudWatchLogs'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: lambda-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
            Resource: arn:aws:logs:*:*:*
            
            

  GetAccountInformation:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getAccountInformation
      Environment:
        Variables: 
          BANK_TABLE: !Ref BankTable
      Handler: bank.getAccountInformation
      Runtime: python3.6
      CodeUri: package/
      Policies:
        
        - DynamoDBReadPolicy:
            TableName: !Ref BankTable  
      
      Events: 
        GetAccount: 
          Type: Api
          Properties: 
            RestApiId: !Ref MyAPI
            Path: "/account/{account_id}"
            Method: GET
  
  PutNewAccount:
    Type: AWS::Serverless::Function
    Properties: 
      FunctionName: putNewAccount
      Environment:
        Variables:
          BANK_TABLE: !Ref BankTable
      Handler: account.putNewAccount
      Runtime: python3.6
      CodeUri: package/
      Policies: 
        - DynamoDBWritePolicy:
            TableName: !Ref BankTable
      Events:
        PutAccount:
          Type: Api
          Properties:
            RestApiId: !Ref MyAPI
            Path: "/account/{account_id}"
            Method: PUT
            
  GetIfCompanyIsVerified:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: lambda_handler
      Environment:
        Variables: 
          COMPANIES_TABLE: !Ref CompaniesTable
          COMPANIES_BUCKET: !Ref CompaniesBucket
      Handler: verifyCompany.lambda_handler
      Runtime: python3.6
      CodeUri: package/
      
      Role: !GetAtt CompanyRole.Arn
      Policies: 
        - DynamoDBReadPolicy:
            TableName: !Ref CompaniesTable  
       
      Events: 
        GetAccount: 
          Type: Api
          Properties: 
            RestApiId: !Ref MyAPI
            Path: "/company/{company_id}"
            Method: GET
  
  # PutVerifiedCompany:
  #   Type: AWS::Serverless::Function
  #   Properties: 
  #     FunctionName: putVerifiedCompany
  #     Environment:
  #       Variables:
  #         BANK_TABLE: !Ref BankTable
  #     Handler: bank.putVerifiedCompany
  #     Runtime: python3.6
  #     CodeUri: package/
  #     Policies: 
  #       - DynamoDBWritePolicy:
  #           TableName: !Ref BankTable
  #     Events:
  #       PutAccount:
  #         Type: Api
  #         Properties:
  #           RestApiId: !Ref MyAPI
  #           Path: "/company/{company_id}"
  #           Method: PUT
            
  GetTransactionInformation:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getTransactionInformation
      Environment:
        Variables: 
          BANK_TABLE: !Ref BankTable
      Handler: bank.getTransactionInformation
      Runtime: python3.6
      CodeUri: package/
 #     Role: !GetAtt TransactionsRole.Arn
      Policies: 
        - DynamoDBReadPolicy:
            TableName: !Ref BankTable  
      Events: 
        GetAccount: 
          Type: Api
          Properties: 
            RestApiId: !Ref MyAPI
            Path: "transaction/{transaction-id}"
            Method: GET
  
  PutTransactionInformation:
    Type: AWS::Serverless::Function
    Properties: 
      FunctionName: putTransactionInformation
      Environment:
        Variables:
          BANK_TABLE: !Ref BankTable
      Handler: transaction.putTransactionInformation
      Runtime: python3.6
      CodeUri: package/
  #    Role: !GetAtt TransactionsRole.Arn
      Policies: 
        - DynamoDBWritePolicy:
            TableName: !Ref BankTable
        - DynamoDBReadPolicy:
            TableName: !Ref CompaniesTable
            TableName: !Ref BankTable
      Events:
        PutTransactionInformation:
          Type: Api
          Properties:
            RestApiId: !Ref MyAPI
            Path: "transaction/{transaction-id}"
            Method: PUT
            
  # TransactionsRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     RoleName: transaction_role
  #     ManagedPolicyArns: 
  #       - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
  #       - 'arn:aws:s3:policy/AmazonS3FullAccess'
  #       - 'arn:aws:iam::aws:policy/AWSOpsWorksCloudWatchLogs'
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #       - Effect: Allow
  #         Principal:
  #           Service:
  #           - lambda.amazonaws.com
  #         Action:
  #         - sts:AssumeRole
  #     Path: "/"
  #     Policies:
  #     - PolicyName: lambda-policy
  #       PolicyDocument:
  #         Version: '2012-10-17'
  #         Statement:
  #         - Effect: Allow
  #           Action:
  #           - s3:PutObject
  #           - s3:GetObject
  #           - s3:DeleteObject
  #           Resource: arn:aws:logs:*:*:*
            
            
            
            
  MyAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: bank-api
      StageName: prod
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: swagger.yaml

  BankTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: bank-table
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
        
      KeySchema:
        - AttributeName: "pk"
          KeyType: HASH
        - AttributeName: "sk"
          KeyType: RANGE
      
      AttributeDefinitions:
        - AttributeName:  "pk"
          AttributeType: S
        - AttributeName: "sk"
          AttributeType: S  
        
  CompaniesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: company_table
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
        
      KeySchema:
        - AttributeName: "pk"
          KeyType: HASH
        - AttributeName: "sk"
          KeyType: RANGE

      
      AttributeDefinitions:
        - AttributeName: "pk"
          AttributeType: S
        - AttributeName: "sk"
          AttributeType: S  
          
          
  # PutNewAccount:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     FunctionName: putNewAccount
  #     Environment:
  #       Variables:
  #         BANK_TABLE: !Ref BankTable
  #     Handler: account.putNewAccount
  #     Runtime: python3.6
  #     CodeUri: package/
  #     Policies:
  #       - DynamoDBWritePolicy:
  #           TableName: !Ref BankTable
  #     Events:
  #       GetUsers:
  #         Type: Api
  #         Properties:
  #           RestApiId: !Ref MyAPI
  #           Path: "/account/{account_id}"
  #           Method: PUT