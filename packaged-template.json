AWSTemplateFormatVersion: '2010-09-09'
Transform:
- AWS::Serverless-2016-10-31
Description: My Bank Project
Resources:
  MyLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: finch-role-04
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: my-lambda-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
  GetBalanceOfAccount:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getBalanceOfAccount
      Environment:
        Variables:
          BANK_TABLE:
            Ref: MyBankProjectTable
      Handler: bank.getBalanceOfAccount
      Runtime: python3.6
      CodeUri: s3://bank-bucket-client/a6a6a931fd3d7b8b3f2d6360f68a6c73
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: MyBankProjectTable
      Events:
        GetAccount:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyAPI
            Path: /account/{account_id}/balance
            Method: GET
  PutAccount:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: putAccountInfo
      Environment:
        Variables:
          BANK_TABLE:
            Ref: MyBankProjectTable
      Handler: bank.putAccountInfo
      Runtime: python3.6
      CodeUri: s3://bank-bucket-client/a6a6a931fd3d7b8b3f2d6360f68a6c73
      Policies:
      - DynamoDBWritePolicy:
          TableName:
            Ref: MyBankProjectTable
      Events:
        PutAccount:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyAPI
            Path: /account
            Method: PUT
  GetIfCompanyIsVerified:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getIfCompanyIsVerified
      Environment:
        Variables:
          BANK_TABLE:
            Ref: MyBankProjectTable
      Handler: bank.getIfCompanyIsVerified
      Runtime: python3.6
      CodeUri: s3://bank-bucket-client/a6a6a931fd3d7b8b3f2d6360f68a6c73
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: MyBankProjectTable
      Events:
        GetAccount:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyAPI
            Path: /company/{company_id}
            Method: GET
  PutVerifiedCompany:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: putVerifiedCompany
      Environment:
        Variables:
          BANK_TABLE:
            Ref: MyBankProjectTable
      Handler: bank.putVerifiedCompany
      Runtime: python3.6
      CodeUri: s3://bank-bucket-client/a6a6a931fd3d7b8b3f2d6360f68a6c73
      Policies:
      - DynamoDBWritePolicy:
          TableName:
            Ref: MyBankProjectTable
      Events:
        PutAccount:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyAPI
            Path: /company/{company_id}
            Method: PUT
  GetSalary:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getSalary
      Environment:
        Variables:
          BANK_TABLE:
            Ref: MyBankProjectTable
      Handler: bank.getSalary
      Runtime: python3.6
      CodeUri: s3://bank-bucket-client/a6a6a931fd3d7b8b3f2d6360f68a6c73
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: MyBankProjectTable
      Events:
        GetAccount:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyAPI
            Path: /account/{account_id}/salary}
            Method: GET
  PutSalary:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: putSalary
      Environment:
        Variables:
          BANK_TABLE:
            Ref: MyBankProjectTable
      Handler: bank.putSalary
      Runtime: python3.6
      CodeUri: s3://bank-bucket-client/a6a6a931fd3d7b8b3f2d6360f68a6c73
      Policies:
      - DynamoDBWritePolicy:
          TableName:
            Ref: MyBankProjectTable
      Events:
        PutAccount:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyAPI
            Path: /account/{account_id}/salary
            Method: PUT
  MyAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: my-ultimate-bank-api
      StageName: prod
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: s3://bank-bucket-client/c0f52c74cc359f30a00eac42d596947f
  MyBankProjectTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: bank-table
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      KeySchema:
      - AttributeName: pk
        KeyType: HASH
      - AttributeName: sk
        KeyType: RANGE
      AttributeDefinitions:
      - AttributeName: pk
        AttributeType: S
      - AttributeName: sk
        AttributeType: S
  TableNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /my-ultimate-bank-table/table/name
      Type: String
      Value:
        Ref: MyBankProjectTable
  TableArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /my-ultimate-bank-table/table/arn
      Type: String
      Value:
        Fn::GetAtt:
        - MyBankProjectTable
        - Arn
